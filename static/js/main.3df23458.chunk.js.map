{"version":3,"sources":["constants/constants.js","redux/middlewares.js","redux/reducer.js","redux/store.js","components/presentational/ScreenString.js","components/presentational/Screen.js","components/presentational/Button.js","components/presentational/ButtonList.js","components/presentational/Calculator.js","components/container/CalculatorContainer.js","redux/actions.js","index.js","App.js"],"names":["__webpack_require__","d","__webpack_exports__","ADD_EXPRESSION","INVALID_BUTTON","CALCULATE_EXPRESSION","RESET_EXPRESSION","BUTTON_LIST","DECIMAL_DIGITS","checkUserInput","_constants_constants__WEBPACK_IMPORTED_MODULE_0__","_ref","dispatch","next","action","type","payload","expression","length","match","eval","toFixed","initState","message","createStore","state","arguments","undefined","Object","assign","applyMiddleware","ScreenString","props","react_default","a","createElement","className","id","string","Screen","components_presentational_ScreenString","Button","i","onClick","val","ButtonList","map","b","components_presentational_Button","key","addExpression","Calculator","components_presentational_Screen","components_presentational_ButtonList","connect","ReactDOM","render","es","store","CalculatorContainer","document","getElementById"],"mappings":"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","file":"static/js/main.3df23458.chunk.js","sourcesContent":["// Redux action constants\r\nexport const ADD_EXPRESSION = 'ADD_EXPRESSION';\r\nexport const INVALID_BUTTON = 'INVALID_BUTTON';\r\nexport const CALCULATE_EXPRESSION = 'CALCULATE_EXPRESSION';\r\nexport const RESET_EXPRESSION = 'RESET_EXPRESSION';\r\n\r\n// Define buttons to be shown on calculator, in order\r\nexport const BUTTON_LIST = ['A/C', '+/-', ' % ', ' / ',\r\n                           '1', '2', '3', ' * ',\r\n                           '4', '5', '6', ' - ',\r\n                           '7', '8', '9', ' + ',\r\n                           '0', '.', '='];\r\n\r\n// Define limit on decimal digits to appear on calculator\r\nexport const DECIMAL_DIGITS = 3;","import { ADD_EXPRESSION, INVALID_BUTTON, CALCULATE_EXPRESSION, RESET_EXPRESSION, DECIMAL_DIGITS } from '../constants/constants';\r\n\r\n// middlewares contain all logical operations\r\n\r\n// middleware to check if current expression is still valid if clicked button is to be added\r\n// triggers after each button click by user\r\n// valid button will add to expression but = button, which will terminate expression and dispatch calculation\r\nexport const checkUserInput = ({ dispatch }) => {\r\n    return (next) => {\r\n        return (action) => {\r\n            if (action.type === ADD_EXPRESSION) {\r\n                if (action.payload === 'A/C') { // reset button\r\n                    return dispatch({ type: RESET_EXPRESSION });\r\n                } else if (action.payload === '+/-') { // negative sign\r\n                    if (action.expression.length !== 0 && action.expression[action.expression.length - 1].match(/[\\d.]/) ) {\r\n                        return dispatch({ type: INVALID_BUTTON, payload: ' ' + action.payload });\r\n                    } else {\r\n                        action.payload = ' -';\r\n                    };\r\n                } else if (action.payload.match(/[+\\-*/%]/)) { \r\n                    if (action.expression.length === 0 || action.expression[action.expression.length - 1].match(/[\\s.-]/)) {\r\n                        return dispatch({ type: INVALID_BUTTON, payload: action.payload });\r\n                    };\r\n                } else if (action.payload === '.') {\r\n                    if (action.expression.match(/[.]/)) {\r\n                        return dispatch({ type: INVALID_BUTTON, payload: ' ' + action.payload });\r\n                    };\r\n                } else if (action.payload === '=') { // = button clicked to initiate calculation\r\n                    if (action.expression.length !== 0 && action.expression[action.expression.length - 1].match(/\\d/)) {\r\n                        return dispatch({ type: CALCULATE_EXPRESSION, payload: eval(action.expression).toFixed(DECIMAL_DIGITS) }); // \\d/0 => infinity is ok\r\n                    } else {\r\n                        return dispatch({ type: INVALID_BUTTON, payload: ' ' + action.payload });\r\n                    };\r\n                };\r\n            };\r\n            return next(action); // simply proceed to ADD_EXPRESSION\r\n        };\r\n    };\r\n};","import { ADD_EXPRESSION, INVALID_BUTTON, CALCULATE_EXPRESSION, RESET_EXPRESSION } from '../constants/constants';\r\n\r\nconst initState = { expression: '', message: '' };\r\n\r\nexport default (state = initState, action) => {\r\n    switch (action.type) {\r\n        case ADD_EXPRESSION:\r\n            return Object.assign({}, state, { \r\n                expression: action.expression + action.payload,\r\n                message: action.payload\r\n            });\r\n        case INVALID_BUTTON:\r\n            return Object.assign({}, state, { \r\n                message: 'Invalid:' + action.payload\r\n            });\r\n        case CALCULATE_EXPRESSION: //need to check if after cal done goes wrong\r\n            return Object.assign({}, state, { \r\n                expression: action.payload,\r\n                message: action.payload\r\n            });\r\n        case RESET_EXPRESSION:\r\n            return Object.assign({}, state, { \r\n                expression: '',\r\n                message: ''\r\n            });\r\n        default: \r\n            return state;\r\n    };\r\n};","import { createStore, applyMiddleware } from 'redux';\r\nimport reducer from './reducer';\r\nimport { checkUserInput } from './middlewares';\r\n\r\n// create redux store\r\nexport default createStore(reducer, applyMiddleware(checkUserInput));","import React from 'react';\r\nimport './ScreenString.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ScreenString = (props) => (\r\n    <div className='screenString' id={props.id}>{props.string}</div>\r\n);\r\n\r\nScreenString.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    string: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ScreenString;","import React from 'react';\r\nimport ScreenString from './ScreenString';\r\nimport './Screen.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Screen = (props) => (\r\n    <div id='screen'>\r\n        <ScreenString id='expression' string={props.expression} />\r\n        <ScreenString id='message' string={props.message} />\r\n    </div>\r\n);\r\n\r\nScreen.propTypes = {\r\n    expression: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Screen;","import React from 'react';\r\nimport './Button.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = (props) => (\r\n    <div className='button' id={'b'+props.i} onClick={props.onClick}>{props.val}</div>\r\n);\r\n\r\nButton.propTypes = {\r\n    i: PropTypes.number.isRequired,\r\n    val: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../presentational/Button';\r\nimport './ButtonList.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ButtonList = (props) => (\r\n    <div id='buttonList'>\r\n        {\r\n            props.BUTTON_LIST.map((b, i) => (\r\n                <Button val={b} key={i} i={i} onClick={() => props.addExpression(b, props.expression)}/>\r\n            ))\r\n        }\r\n    </div>\r\n);\r\n\r\nButtonList.propTypes = {\r\n    BUTTON_LIST: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    addExpression: PropTypes.func.isRequired,\r\n    expression: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ButtonList;","import React from 'react';\r\nimport Screen from './Screen';\r\nimport ButtonList from '../presentational/ButtonList';\r\nimport './Calculator.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Calculator = (props) => (\r\n    <div id='calculator'>\r\n        <Screen expression={props.expression} message={props.message} />\r\n        <ButtonList BUTTON_LIST={props.BUTTON_LIST} expression={props.expression} addExpression={props.addExpression} />\r\n    </div>\r\n);\r\n\r\nCalculator.propTypes = {\r\n    expression: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    BUTTON_LIST: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    addExpression: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Calculator;","import { connect } from 'react-redux';\r\nimport Calculator from '../presentational/Calculator';\r\nimport { addExpression } from '../../redux/actions';\r\nimport { BUTTON_LIST } from '../../constants/constants';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        expression: state.expression,\r\n        message: state.message,\r\n        BUTTON_LIST: BUTTON_LIST\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addExpression: (payload, expression) => dispatch(addExpression(payload, expression))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Calculator);","import { ADD_EXPRESSION } from '../constants/constants';\r\n\r\nexport const addExpression = (payload, expression) => {\r\n    return {\r\n        type: ADD_EXPRESSION,\r\n        payload,\r\n        expression\r\n    };\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n);","import React from 'react';\nimport CalculatorContainer from './components/container/CalculatorContainer';\n\nexport default () => {\n    return (\n        <div id='App'>\n            <CalculatorContainer />\n        </div>\n    );\n};"],"sourceRoot":""}